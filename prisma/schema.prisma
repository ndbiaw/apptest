//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id                String             @id() @default(uuid())
  name              String?
  email             String?            @unique()
  pictureUrl        String?            @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation   String?
  stripeCustomerId  String?
  status            UserStatus         @default(VERIFIED)
  globalRole        String             @default("USER")
  /// @password
  /// @omit
  password          String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt()
  organizationRoles OrganizationRole[]
  quizs             Quiz[]             @relation("user")
  quizAttempts      QuizAttempt[]      @relation("user")
}

/// @@allow('all', true)
model Quiz {
  id                 String        @id() @default(uuid())
  title              String
  description        String?
  isPublic           Boolean
  docxFileUrl        String?
  shareableLinkToken String?
  userId             String
  user               User?         @relation(fields: [userId], references: [id], name: "user")
  organizationId     String?
  organization       Organization? @relation(fields: [organizationId], references: [id], name: "organization")
  questions          Question[]    @relation("quiz")
  quizAttempts       QuizAttempt[] @relation("quiz")
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Question {
  id                 String              @id() @default(uuid())
  text               String
  imageUrl           String?
  order              Float
  quizId             String
  quiz               Quiz?               @relation(fields: [quizId], references: [id], name: "quiz")
  choices            Choice[]            @relation("question")
  quizAttemptAnswers QuizAttemptAnswer[] @relation("question")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Choice {
  id                 String              @id() @default(uuid())
  text               String
  isCorrect          Boolean
  order              Float
  questionId         String
  question           Question?           @relation(fields: [questionId], references: [id], name: "question")
  quizAttemptAnswers QuizAttemptAnswer[] @relation("choice")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now()) @updatedAt()
}

/// @@allow('all', true)
model QuizAttempt {
  id                 String              @id() @default(uuid())
  startTime          String?
  endTime            String?
  score              String?
  quizId             String
  quiz               Quiz?               @relation(fields: [quizId], references: [id], name: "quiz")
  userId             String
  user               User?               @relation(fields: [userId], references: [id], name: "user")
  quizAttemptAnswers QuizAttemptAnswer[] @relation("quizAttempt")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now()) @updatedAt()
}

/// @@allow('all', true)
model QuizAttemptAnswer {
  id            String       @id() @default(uuid())
  isCorrect     Boolean
  quizAttemptId String
  quizAttempt   QuizAttempt? @relation(fields: [quizAttemptId], references: [id], name: "quizAttempt")
  questionId    String
  question      Question?    @relation(fields: [questionId], references: [id], name: "question")
  choiceId      String
  choice        Choice?      @relation(fields: [choiceId], references: [id], name: "choice")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt()
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', roles?[user == auth() && name == 'owner'])
/// @@allow('read', roles?[user == auth()])
model Organization {
  id               String             @id() @default(uuid())
  name             String
  pictureUrl       String?            @default("https://i.imgur.com/BgkFiid.jpeg")
  stripeCustomerId String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt()
  roles            OrganizationRole[]
  quizs            Quiz[]             @relation("organization")
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', organization.roles?[user == auth() && name == 'owner'])
/// @@allow('create', organization.roles?[user == auth()] && name != 'owner')
/// @@allow('read', organization.roles?[user == auth()])
/// @@allow('delete', auth() == user)
model OrganizationRole {
  id             String       @id() @default(uuid())
  name           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt()
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}
